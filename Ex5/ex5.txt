SQL> set echo on;
SQL> set line 150;
SQL> @C:\Users\Viki\Desktop\create.sql
SQL> REM PL/SQL â€“ Control Structures
SQL> 
SQL> REM Drop Table
SQL> 
SQL> DROP TABLE Order_List;

Table dropped.

SQL> DROP TABLE Orders;

Table dropped.

SQL> DROP TABLE Pizza;

Table dropped.

SQL> DROP TABLE Customer;

Table dropped.

SQL> 
SQL> REM Create Table
SQL> 
SQL> CREATE TABLE Customer(
  2  	     cust_id varchar2(10) CONSTRAINT cust_pk PRIMARY KEY,
  3  	     cust_name varchar2(10),
  4  	     address varchar2(40),
  5  	     phone number(10));

Table created.

SQL> 
SQL> 
SQL> CREATE TABLE Pizza(
  2  	     pizza_id varchar2(10) CONSTRAINT pizza_pk PRIMARY KEY,
  3  	     pizza_type varchar2(15),
  4  	     unit_price number(10));

Table created.

SQL> 
SQL> 
SQL> CREATE TABLE Orders(
  2  	     order_no varchar2(10) CONSTRAINT order_pk PRIMARY KEY,
  3  	     cust_id varchar2(10),
  4  	     order_date date,
  5  	     delv_date date,
  6  	     CONSTRAINT cust_fk FOREIGN KEY(cust_id) REFERENCES Customer(cust_id));

Table created.

SQL> 
SQL> 
SQL> CREATE TABLE Order_List(
  2  	     order_no varchar2(10) CONSTRAINT order_fk REFERENCES Orders(order_no),
  3  	     pizza_id varchar2(10) CONSTRAINT pizza_fk REFERENCES Pizza(pizza_id),
  4  	     qty number(10),
  5  	     CONSTRAINT order_list_pk PRIMARY KEY(order_no,pizza_id));

Table created.

SQL> 
SQL> set echo off;
SQL> @C:\Users\Viki\Desktop\pizza_db.sql

1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.


1 row created.

SQL> set echo on;
SQL> @C:\Users\Viki\Desktop\ex5.sql
SQL> 
SQL> REM 1. Check whether the given pizza type is available. If not display appropriate message.
SQL> 
SQL> SET SERVEROUTPUT ON;
SQL> REM pan
SQL> 
SQL> DECLARE
  2  	     pizzatype Pizza.pizza_type%TYPE;
  3  	     p Pizza.pizza_type%TYPE;
  4  	     CURSOR pizzat IS
  5  	     SELECT pizza_type
  6  	     FROM Pizza
  7  	     WHERE pizza_type=pizzatype;
  8  
  9  BEGIN
 10  	     pizzatype:='&pizzatype';
 11  
 12  	     OPEN pizzat;
 13  
 14  	     FETCH pizzat INTO p;
 15  
 16  	     IF pizzat%FOUND THEN
 17  		     dbms_output.put_line('Pizza Available');
 18  	     ELSE
 19  		     dbms_output.put_line('Pizza Not Available');
 20  	     END IF;
 21  	     CLOSE pizzat;
 22  END;
 23  /
Enter value for pizzatype: pan
old  10: 	pizzatype:='&pizzatype';
new  10: 	pizzatype:='pan';
Pizza Available                                                                                                                                       

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> 
SQL> REM 2. For the given customer name and a range of order date, find whether a customer had
SQL> REM placed any order, if so display the number of orders placed by the customer along
SQL> REM with the order number(s).
SQL> 
SQL> SET SERVEROUTPUT ON;
SQL> 
SQL> REM Hari
SQL> REM 25-JUN-2015
SQL> REM 30-JUN-2015
SQL> 
SQL> DECLARE
  2  	     name Customer.cust_name%TYPE;
  3  	     start_date DATE;
  4  	     end_date DATE;
  5  	     orderno Orders.order_no%TYPE;
  6  
  7  	     CURSOR onum IS
  8  	     SELECT o.order_no
  9  	     FROM Customer c,Orders o
 10  	     WHERE c.cust_name=name AND
 11  		     c.cust_id=o.cust_id AND
 12  		     o.order_date BETWEEN start_date AND end_date;
 13  
 14  BEGIN
 15  	     name:='&name';
 16  	     start_date:='&start_date';
 17  	     end_date:='&end_date';
 18  
 19  	     dbms_output.put_line('Customer name :'||name);
 20  
 21  	     OPEN onum;
 22  
 23  	     FETCH onum INTO orderno;
 24  
 25  	     IF onum%NOTFOUND THEN
 26  		     dbms_output.put_line('Not placed any orders in the given period');
 27  	     ELSE
 28  		     dbms_output.put_line('Orders : ');
 29  		     WHILE  onum%FOUND LOOP
 30  			     dbms_output.put_line(orderno);
 31  			     FETCH onum INTO orderno;
 32  		     END LOOP;
 33  		     dbms_output.put_line('Number of Orders : '||onum%ROWCOUNT);
 34  	     END IF;
 35  	     CLOSE onum;
 36  END;
 37  /
Enter value for name: Hari
old  15: 	name:='&name';
new  15: 	name:='Hari';
Enter value for start_date: 25-jun-2015
old  16: 	start_date:='&start_date';
new  16: 	start_date:='25-jun-2015';
Enter value for end_date: 30-jun-2015
old  17: 	end_date:='&end_date';
new  17: 	end_date:='30-jun-2015';
Customer name :Hari                                                                                                                                   
Orders :                                                                                                                                              
OP100                                                                                                                                                 
OP500                                                                                                                                                 
Number of Orders : 2                                                                                                                                  

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> REM 3. Display the customer name along with the details of pizza type and its quantity
SQL> REM ordered for the given order number. Also find the total quantity ordered for the given
SQL> REM order number as shown below:
SQL> 
SQL> 
SQL> SET SERVEROUTPUT ON;
SQL> 
SQL> REM OP100
SQL> 
SQL> DECLARE
  2  	     name Customer.cust_name%TYPE;
  3  	     pizzatype Pizza.pizza_type%TYPE;
  4  	     quantity Order_List.qty%TYPE;
  5  	     numbers number(10);
  6  	     orderno orders.order_no%TYPE;
  7  
  8  	     CURSOR cname IS
  9  	     SELECT c.cust_name
 10  	     FROM Customer c,Orders o
 11  	     WHERE o.order_no=orderno AND
 12  		     o.cust_id=c.cust_id;
 13  
 14  	     CURSOR pqty IS
 15  	     SELECT p.pizza_type,o.qty
 16  	     FROM Pizza p, Order_List o
 17  	     WHERE o.order_no=orderno AND
 18  		     p.pizza_id=o.pizza_id;
 19  
 20  BEGIN
 21  	     orderno:='&orderno';
 22  	     numbers:=0;
 23  
 24  	     OPEN cname;
 25  	     OPEN pqty;
 26  
 27  	     FETCH cname INTO name;
 28  	     FETCH pqty INTO pizzatype,quantity;
 29  
 30  	     IF cname%NOTFOUND THEN
 31  		     dbms_output.put_line('Wrong order number');
 32  	     ELSE
 33  		     dbms_output.put_line('Customer Name : '||name);
 34  		     dbms_output.put_line(RPAD('Pizza Type', 15)||RPAD('Qty.', 5));
 35  		     WHILE pqty%FOUND LOOP
 36  			     dbms_output.put_line(RPAD(pizzatype,15)||RPAD(quantity,5));
 37  			     numbers:=numbers+quantity;
 38  			     FETCH cname INTO name;
 39  			     FETCH pqty INTO pizzatype,quantity;
 40  		     END LOOP;
 41  		     dbms_output.put_line('---------------------------');
 42  		     dbms_output.put_line('Total Qty : '||numbers);
 43  	     END IF;
 44  	     CLOSE cname;
 45  	     CLOSE pqty;
 46  END;
 47  /
Enter value for orderno: OP100
old  21: 	orderno:='&orderno';
new  21: 	orderno:='OP100';
Customer Name : Hari                                                                                                                                  
Pizza Type     Qty.                                                                                                                                   
pan            3                                                                                                                                      
grilled        2                                                                                                                                      
italian        1                                                                                                                                      
spanish        5                                                                                                                                      
---------------------------                                                                                                                           
Total Qty : 11                                                                                                                                        

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> 
SQL> 
SQL> REM 4. Display the total number of orders that contains one pizza type, two pizza type and so on.
SQL> 
SQL> SET SERVEROUTPUT ON;
SQL> 
SQL> DECLARE
  2  	     ptype_count number(10);
  3  	     max_types number(10);
  4  	     counter number(10);
  5  	     orderno Orders.order_no%TYPE;
  6  
  7  	     CURSOR pcount IS
  8  	     SELECT COUNT(DISTINCT pizza_type)
  9  	     FROM Pizza;
 10  
 11  	     CURSOR onum IS
 12  	     SELECT order_no
 13  	     FROM Order_List
 14  	     GROUP BY order_no
 15  	     HAVING COUNT(order_no)=counter;
 16  
 17  BEGIN
 18  	     counter:=0;
 19  
 20  	     OPEN pcount;
 21  
 22  	     FETCH pcount INTO max_types;
 23  
 24  	     IF max_types=0 THEN
 25  		     dbms_output.put_line('pizza table empty');
 26  	     ELSE
 27  		     DBMS_OUTPUT.PUT_LINE('Number of Orders that contain: ');
 28  	     FOR COUNT IN 1 .. max_types LOOP
 29  			     ptype_count:=0;
 30  			     counter:=counter+1;
 31  			     OPEN onum;
 32  			     FETCH onum INTO orderno;
 33  			     WHILE onum%FOUND LOOP
 34  				     ptype_count:=ptype_count+1;
 35  				     FETCH onum INTO orderno;
 36  			     END LOOP;
 37  			     CLOSE onum;
 38  			     dbms_output.put_line(counter||' Pizza Type    '||ptype_count);
 39  		     END LOOP;
 40  	     END IF;
 41  	     CLOSE pcount;
 42  END;
 43  /
Number of Orders that contain:                                                                                                                        
1 Pizza Type    2                                                                                                                                     
2 Pizza Type    1                                                                                                                                     
3 Pizza Type    2                                                                                                                                     
4 Pizza Type    1                                                                                                                                     

PL/SQL procedure successfully completed.

SQL> 
SQL> spool off;
